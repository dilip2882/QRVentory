package com.dilip.qrventory.presentation.devices.device_list

import android.graphics.Bitmap
import android.icu.text.SimpleDateFormat
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.DatePicker
import androidx.compose.material3.DatePickerDialog
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MenuAnchorType
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TextField
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.rememberDatePickerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableLongStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.NavController
import com.dilip.domain.models.device.DeviceQrs
import com.dilip.qrventory.presentation.devices.DevicesViewModel
import com.dilip.qrventory.presentation.devices.components.generateQrCode
import com.dilip.qrventory.presentation.settings.device_assignee.DeviceAssigneeViewModel
import com.dilip.qrventory.presentation.settings.device_location.DeviceLocationViewModel
import com.dilip.qrventory.presentation.settings.device_type.DeviceTypeViewModel
import java.io.ByteArrayOutputStream
import java.util.Date
import java.util.Locale

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddDevice(
    navController: NavController,
    deviceId: String? = null,
) {
    val devicesViewModel: DevicesViewModel = hiltViewModel()
    val deviceTypeViewModel: DeviceTypeViewModel = hiltViewModel()
    val deviceAssigneeViewModel: DeviceAssigneeViewModel = hiltViewModel()
    val deviceLocationViewModel: DeviceLocationViewModel = hiltViewModel()

    // Device details state variables
    var deviceSerialNo by remember { mutableStateOf(deviceId ?: "") } // Prepopulate if editing
    var selectedDeviceType by remember { mutableStateOf("") }
    var selectedAssignee by remember { mutableStateOf("") }
    var selectedLocation by remember { mutableStateOf("") }
    var selectedDate by remember { mutableLongStateOf(Date().time) }

    // Dropdown expand states
    var expandedType by remember { mutableStateOf(false) }
    var expandedAssignee by remember { mutableStateOf(false) }
    var expandedLocation by remember { mutableStateOf(false) }

    // Dropdown data collections
    val deviceTypes by deviceTypeViewModel.types.collectAsState(initial = emptyList())
    val assignees by deviceAssigneeViewModel.assignees.collectAsState(initial = emptyList())
    val locations by deviceLocationViewModel.locations.collectAsState(initial = emptyList())

    // Date picker visibility and QR code generation state
    var datePickerVisible by remember { mutableStateOf(false) }
    val dateState = rememberDatePickerState()

    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }

    LaunchedEffect(deviceId) {
        deviceId?.let { id ->
            // deviceSerialNo for fetching existing records
            val existingDevice = devicesViewModel.devicesQr.value.find { it.deviceSN == id }

            existingDevice?.let { device ->
                deviceSerialNo = device.deviceSN
                selectedDeviceType = device.deviceType
                selectedAssignee = device.deviceAssignee
                selectedLocation = device.location
                selectedDate =
                    SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).parse(device.date)?.time
                        ?: Date().time
            }
        }
    }

    Column {
        // Top app bar with back button
        TopAppBar(
            title = { Text(if (deviceId == null) "Add Device" else "Edit Device") },
            navigationIcon = {
                IconButton(onClick = { navController.popBackStack() }) {
                    Icon(
                        imageVector = Icons.AutoMirrored.Default.ArrowBack,
                        contentDescription = "Back",
                    )
                }
            },
        )

        // Form fields
        LazyColumn(
            modifier = Modifier
                .padding(30.dp)
                .fillMaxWidth(),
        ) {
            item {
                OutlinedTextField(
                    value = deviceSerialNo,
                    onValueChange = { deviceSerialNo = it },
                    label = { Text("Device Serial Number") },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(10.dp),
                    singleLine = true,
                )
            }

            // Device Type Dropdown
            item {
                ExposedDropdownMenuBox(
                    expanded = expandedType,
                    onExpandedChange = { expandedType = !expandedType },
                ) {
                    TextField(
                        readOnly = true,
                        value = selectedDeviceType.ifEmpty { "Select Device Type" },
                        onValueChange = {},
                        label = { Text("Device Type/Name") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(10.dp)
                            .menuAnchor(MenuAnchorType.PrimaryNotEditable, true),
                    )
                    DropdownMenu(
                        expanded = expandedType,
                        onDismissRequest = { expandedType = false },
                        modifier = Modifier.fillMaxWidth(),
                    ) {
                        deviceTypes.forEach { type ->
                            DropdownMenuItem(
                                text = { Text(type.type) },
                                onClick = {
                                    selectedDeviceType = type.type
                                    expandedType = false
                                },
                            )
                        }
                    }
                }
            }

            // Assignee Dropdown
            item {
                ExposedDropdownMenuBox(
                    expanded = expandedAssignee,
                    onExpandedChange = { expandedAssignee = !expandedAssignee },
                ) {
                    TextField(
                        readOnly = true,
                        value = selectedAssignee.ifEmpty { "Select Assignee" },
                        onValueChange = {},
                        label = { Text("Device Assignee") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(10.dp)
                            .menuAnchor(MenuAnchorType.PrimaryNotEditable, true),
                    )
                    DropdownMenu(
                        expanded = expandedAssignee,
                        onDismissRequest = { expandedAssignee = false },
                        modifier = Modifier.fillMaxWidth(),
                    ) {
                        assignees.forEach { assignee ->
                            DropdownMenuItem(
                                text = { Text(assignee.name) },
                                onClick = {
                                    selectedAssignee = assignee.name
                                    expandedAssignee = false
                                },
                            )
                        }
                    }
                }
            }

            // Location Dropdown
            item {
                ExposedDropdownMenuBox(
                    expanded = expandedLocation,
                    onExpandedChange = { expandedLocation = !expandedLocation },
                ) {
                    TextField(
                        readOnly = true,
                        value = selectedLocation.ifEmpty { "Select Device Location" },
                        onValueChange = {},
                        label = { Text("Device Location") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(10.dp)
                            .menuAnchor(MenuAnchorType.PrimaryNotEditable, true),
                    )
                    DropdownMenu(
                        expanded = expandedLocation,
                        onDismissRequest = { expandedLocation = false },
                        modifier = Modifier.fillMaxWidth(),
                    ) {
                        locations.forEach { location ->
                            DropdownMenuItem(
                                text = { Text(location.location) },
                                onClick = {
                                    selectedLocation = location.location
                                    expandedLocation = false
                                },
                            )
                        }
                    }
                }
            }

            // Date picker and display
            item {
                OutlinedButton(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(10.dp),
                    onClick = { datePickerVisible = true },
                ) {
                    Text(text = "Select Date")
                }
            }

            item {
                Modifier.align(Alignment.CenterHorizontally)
                Text(
                    text = "Default Selected Date: ${convertLongDates(selectedDate)}",
                    modifier = Modifier
                        .padding(top = 16.dp)
                        .fillMaxWidth()
                        .wrapContentSize(Alignment.Center)
                        .align(Alignment.CenterHorizontally),
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    textAlign = TextAlign.Center,
                )
            }
        }

        // DatePicker Dialog
        if (datePickerVisible) {
            DatePickerDialog(
                onDismissRequest = { datePickerVisible = false },
                confirmButton = {
                    TextButton(onClick = {
                        selectedDate = dateState.selectedDateMillis ?: selectedDate
                        datePickerVisible = false
                    }) {
                        Text(text = "Yes")
                    }
                },
                dismissButton = {
                    TextButton(onClick = { datePickerVisible = false }) {
                        Text(text = "No")
                    }
                },
            ) {
                DatePicker(state = rememberDatePickerState())
            }
        }

        Spacer(modifier = Modifier.size(15.dp))

        // Create or Update QR button
        OutlinedButton(
            onClick = {
                if (deviceSerialNo.isNotBlank() &&
                    selectedDeviceType.isNotBlank() &&
                    selectedAssignee.isNotBlank() &&
                    selectedLocation.isNotBlank()
                ) {
                    val qrData = "${selectedDeviceType}\n$deviceSerialNo\n$selectedAssignee\n${
                        convertLongDates(selectedDate)
                    }\n$selectedLocation"
                    qrCodeGenerated = generateQrCode(qrData)
                    qrCodeGenerated?.let {
                        val qrBytes = bitmapToByteArray(it)
                        val deviceQr = DeviceQrs(
                            deviceType = selectedDeviceType,
                            deviceSN = deviceSerialNo,
                            deviceAssignee = selectedAssignee,
                            date = convertLongDates(selectedDate),
                            location = selectedLocation,
                            deviceQr = qrBytes,
                        )

                        if (deviceId == null) {
                            devicesViewModel.addDeviceQr(deviceQr) // Add new device
                        } else {
                            devicesViewModel.updateDeviceQr(deviceQr) // Update existing device
                        }

                        navController.popBackStack() // Return to DevicesScreen
                    }
                }
            },
            modifier = Modifier.fillMaxWidth(),
            enabled = deviceSerialNo.isNotBlank() &&
                selectedDeviceType.isNotBlank() &&
                selectedAssignee.isNotBlank() &&
                selectedLocation.isNotBlank(),
        ) {
            Text(if (deviceId == null) "Create QR" else "Update QR")
        }
    }
}

fun convertLongDates(date: Long): String {
    val dateNew = Date(date)
    val format = SimpleDateFormat.getDateInstance()
    return format.format(dateNew)
}

fun bitmapToByteArray(bitmap: Bitmap): ByteArray {
    val stream = ByteArrayOutputStream()
    bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
    return stream.toByteArray()
}
